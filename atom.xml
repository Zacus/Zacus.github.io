<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zealoustarry</title>
  
  <subtitle>灿烂星空</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-01-29T16:03:22.383Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhao shuai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022新年快乐</title>
    <link href="http://yoursite.com/2022/01/30/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
    <id>http://yoursite.com/2022/01/30/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/</id>
    <published>2022-01-29T16:00:44.000Z</published>
    <updated>2022-01-29T16:03:22.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="王同学"><a href="#王同学" class="headerlink" title="王同学"></a>王同学</h1><pre><code>新年快乐 </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;王同学&quot;&gt;&lt;a href=&quot;#王同学&quot; class=&quot;headerlink&quot; title=&quot;王同学&quot;&gt;&lt;/a&gt;王同学&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;新年快乐 &lt;/code&gt;&lt;/pre&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>线程同步</title>
    <link href="http://yoursite.com/2021/03/02/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    <id>http://yoursite.com/2021/03/02/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</id>
    <published>2021-03-02T03:38:53.000Z</published>
    <updated>2021-03-02T03:39:05.047Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">D((创建))--许可--&gt;A((就绪))</span><br><span class="line">A((就绪))  --进程调度--&gt; B((执行))</span><br><span class="line">B((执行)) --I/O请求--&gt; C((阻塞))</span><br><span class="line">B((执行)) --时间片完--&gt; A((就绪))</span><br><span class="line">C((阻塞)) --I/O完成--&gt;A((就绪))</span><br><span class="line">B((执行)) --释放--&gt; E((终止))</span><br></pre></td></tr></table></figure><p>新创建进程首先处于新状态<br>当OS接纳新状态进程为就绪进程<br>OS只能从就绪进程中选一个进程执行<br>执行状态的进程执行完毕,或者被取消,则转化为终止状态<br>分时系统中,时间片用完,或优先级高的进程到来,将终止优先级低的进程执行<br>执行进程需要等待某事件发生.通常因进程需要的系统调用不能立即执行而阻塞<br>当阻塞进程等待的事件I/O完成,就转化为就绪状态<br>某些系统允许父进程在任何情况下终止其子进程.</p><p>背景:由于创建进程(PCB 状态 内存分配 进程ID 等),当创建多个进程会占用大量的内存空间,导致效率降低,创建线程只需要少量的内存资源,同一个进程的线程共享资源,<br>线程是程序运行的过程,是计算机资源调度的基本单位</p><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">pthread_mutex_t</span> mutex;   <span class="comment">//声明锁</span></span><br><span class="line"><span class="number">2.</span>pthread_mutex_init(&amp;mutex); <span class="comment">//初始化互斥锁</span></span><br><span class="line"><span class="number">3.</span>pthread_mutex_lock(&amp;mutex); <span class="comment">//进入区</span></span><br><span class="line">...临界区代码...</span><br><span class="line"><span class="number">4.</span>pthread_mutex_unlock(&amp;mutex);<span class="comment">//退出区</span></span><br><span class="line"><span class="number">5.</span>pthread_mutex_destroy(&amp;mutex);<span class="comment">//释放互斥资源</span></span><br></pre></td></tr></table></figure><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁,"></a>死锁,</h4><pre><code>一组进程中的每一个进程都在等待仅由该组进程中的其他进程才能引发的事件</code></pre><hr><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><pre><code>1.竞争不可抢占资源引发的死锁2.竞争可消耗资源引发的死锁3.进程推进顺序不当引发的死锁</code></pre><hr><h5 id="产生死锁的必要条件"><a href="#产生死锁的必要条件" class="headerlink" title="产生死锁的必要条件"></a>产生死锁的必要条件</h5><pre><code>互斥条件请求和保持条件不可抢占条件循环等待条件</code></pre><hr><h6 id="解决死锁的方法"><a href="#解决死锁的方法" class="headerlink" title="解决死锁的方法"></a>解决死锁的方法</h6><blockquote><p>预防死锁</p><blockquote></blockquote><p>避免死锁</p><blockquote></blockquote><p>检测死锁</p><blockquote></blockquote><p>接除死锁</p><blockquote></blockquote></blockquote><hr><h4 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h4><pre><code>共享-独占锁.当读写锁以读模式锁住时,它是以共享模式锁住的;但当它以写模式锁住时,它是以独占模式锁住的.写独占.读共享,写优先级高</code></pre><h6 id="使用场合"><a href="#使用场合" class="headerlink" title="使用场合"></a>使用场合</h6><pre><code>适合对数据结构读的次数大于写的次数的情况</code></pre><h6 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h6><hr><h6 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>定义读写锁</span><br><span class="line"><span class="keyword">pthread_rwlock_t</span> rwlock;</span><br><span class="line"><span class="number">2.</span>初始化读写锁</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_init</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">pthread_rwlock_t</span> *<span class="keyword">restrict</span> rwlock,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">pthread_rwlockattr_t</span> *<span class="keyword">restrict</span> attr)</span></span>;</span><br><span class="line">第一个参数:rwlock-读写锁</span><br><span class="line">第二个参数:attr-读写锁属性,传<span class="literal">NULL</span>为默认属性</span><br><span class="line"><span class="number">3.</span>销毁读写锁</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_destroy</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br><span class="line"><span class="number">4.</span>加读锁</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_rdlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br><span class="line"><span class="number">5.</span>尝试加读锁</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_tryrdlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br><span class="line"><span class="number">6.</span>加写锁</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_wrlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br><span class="line"><span class="number">7.</span>尝试加写锁</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_wrlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br><span class="line"><span class="number">8.</span>解锁</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_unlock</span><span class="params">(&amp;<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br></pre></td></tr></table></figure><hr><p>例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   *读写锁</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 3个线程不定时写同一全局资源,5个线程不定时读同一个全局资源</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  </span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;    //sterror</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">pthread_rwlock_t</span> rwlock;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> number=<span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> *<span class="title">write</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">          <span class="keyword">int</span> i=*(<span class="keyword">int</span> *)arg;</span><br><span class="line">          <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">  </span><br><span class="line">          <span class="comment">//写锁</span></span><br><span class="line">          pthread_rwlock_wrlock(&amp;rwlock);</span><br><span class="line">          <span class="keyword">int</span> n=number;</span><br><span class="line">          n++;</span><br><span class="line">          number=n;</span><br><span class="line">          <span class="comment">//sleep(rand()%3);</span></span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"W[%d]-write:[%d]\n"</span>,i,number);</span><br><span class="line">          <span class="comment">//解锁</span></span><br><span class="line">          pthread_rwlock_unlock(&amp;rwlock);</span><br><span class="line">          sleep(rand()%<span class="number">3</span>);</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> *<span class="title">read</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">int</span> i=*(<span class="keyword">int</span> *)arg;</span><br><span class="line">          <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">          <span class="comment">//读锁  </span></span><br><span class="line">          pthread_rwlock_rdlock(&amp;rwlock);</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"R[%d]-read:[%d]\n"</span>,i,number);</span><br><span class="line">          <span class="comment">//sleep(rand()%3);</span></span><br><span class="line">          <span class="comment">//解锁</span></span><br><span class="line">          pthread_rwlock_unlock(&amp;rwlock);</span><br><span class="line">          sleep(rand()%<span class="number">3</span>);</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">          <span class="keyword">pthread_t</span> t[<span class="number">8</span>];</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">          <span class="keyword">pthread_attr_t</span> *attr=<span class="literal">NULL</span>;</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">int</span> arr[<span class="number">8</span>];</span><br><span class="line">  </span><br><span class="line">          pthread_rwlock_init(&amp;rwlock,<span class="literal">NULL</span>);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">          <span class="comment">//       int pthread_create(pthread_t *thread, const pthread_attr_t *attr,</span></span><br><span class="line">          <span class="comment">//       void *(*start_routine) (void *), void *arg);</span></span><br><span class="line">          <span class="comment">//       第三个参数是函数</span></span><br><span class="line">          <span class="comment">//       第四个是第三个对应函数的参数</span></span><br><span class="line">  </span><br><span class="line">          <span class="comment">//3个写线程</span></span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)&#123;</span><br><span class="line">          <span class="comment">//创建线程</span></span><br><span class="line">          arr[i]=i;</span><br><span class="line">          <span class="keyword">int</span> ret=pthread_create(&amp;t[i],attr,write,&amp;arr[i]);</span><br><span class="line">            <span class="keyword">if</span>(ret)&#123;</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"create error!!!!,[%s]\n"</span>,strerror(ret));<span class="comment">//返回错误  sterror函数</span></span><br><span class="line">              <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="comment">//5个读进程</span></span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;<span class="number">8</span>;++i)&#123;</span><br><span class="line">  </span><br><span class="line">          arr[i]=i;</span><br><span class="line">          <span class="keyword">int</span> ret=pthread_create(&amp;t[i],attr,read,&amp;arr[i]);</span><br><span class="line">            <span class="keyword">if</span>(ret)&#123;</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"create error!!!!,[%s]\n"</span>,strerror(ret));<span class="comment">//返回错误  sterror函数</span></span><br><span class="line">              <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">  </span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">8</span>;++j)&#123;</span><br><span class="line">  </span><br><span class="line">            pthread_join(t[j],<span class="literal">NULL</span>);</span><br><span class="line">  </span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//释放互斥锁</span></span><br><span class="line">          pthread_rwlock_destroy(&amp;rwlock);</span><br><span class="line">  </span><br><span class="line">          sleep(<span class="number">1</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><h6 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h6><pre><code>条件变量相关函数pthread_cond_t cond; //定义一个条件变量int pthread_cond_init(pthread_cond_t *restrict cond,const pthread_condattr_t  *restrict attr);//初始化函数参数:cond:条件变量        attr:条件变量属性,通常传NULL函数返回值:成功返回0,失败返回错误号int pthread_cond_destroy(pthread_cond_t *cond);//销毁int pthread_cond_wait(pthread_cond_t *restrict cond,                        pthread_mutex_t *restrict mutex);函数描述:条件不满足,引起线程阻塞并解锁        条件满足,解除线程阻塞,并加锁int pthread_cond_signal(pthread_cond_t *cond);函数描述:唤醒至少一个阻塞在该条件变量上的线程函数参数:条件变量函数返回值:成功返回0,失败返回错误号</code></pre><h6 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义锁</span></span><br><span class="line">  <span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line">  <span class="comment">//定义条件变量</span></span><br><span class="line">  <span class="keyword">pthread_cond_t</span> cond;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">  </span><br><span class="line">          <span class="keyword">int</span> data;</span><br><span class="line">          <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">  &#125;Node;</span><br><span class="line">  </span><br><span class="line">  Node *head=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> *<span class="title">producer</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">          <span class="keyword">int</span> val=*(<span class="keyword">int</span> *)arg;</span><br><span class="line">          Node *pNode=<span class="literal">NULL</span>;</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">  </span><br><span class="line">            pNode =(Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">            <span class="keyword">if</span>(!pNode)&#123;</span><br><span class="line">  </span><br><span class="line">                    perror(<span class="string">"malloc error"</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            pNode-&gt;data=rand()%<span class="number">1000</span>;</span><br><span class="line">  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"thread[%d],P:[%d]\n"</span>,val,pNode-&gt;data);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//加锁</span></span><br><span class="line">            pthread_mutex_lock(&amp;mutex);</span><br><span class="line">            pNode-&gt;next=head;</span><br><span class="line">            head=pNode;</span><br><span class="line">            <span class="comment">//解锁</span></span><br><span class="line">            pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//唤醒,解除堵塞</span></span><br><span class="line">            <span class="comment">//通知消费者线程解除阻塞</span></span><br><span class="line">            pthread_cond_signal(&amp;cond);</span><br><span class="line">                      </span><br><span class="line">            sleep(rand()%<span class="number">3</span>);</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">consumer</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">int</span> val=*(<span class="keyword">int</span> *)arg;</span><br><span class="line">          Node *pNode=<span class="literal">NULL</span>;</span><br><span class="line">          <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//加锁</span></span><br><span class="line">            pthread_mutex_lock(&amp;mutex);</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span>(!head)&#123;</span><br><span class="line">                    <span class="comment">//条件不满足,需要阻塞等待</span></span><br><span class="line">                    <span class="comment">//若条件不满足,则阻塞等待并解锁</span></span><br><span class="line">                    <span class="comment">//条件满足(pthread_cond_singal函数通知),解除阻塞并加锁</span></span><br><span class="line">                    pthread_cond_wait(&amp;cond,&amp;mutex);</span><br><span class="line">            &#125;</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//边界情况 </span></span><br><span class="line">            <span class="comment">//只有一个生产者生产了一件商品,此时会调用pthread_cond_signal通知消费者(消费者线程),告诉他有商品可购买,当它通知了</span></span><br><span class="line">            <span class="comment">//多个消费者时,则只有一个消费者得到购买资格(获得锁),然后买到商品(head置为空),然后其余已通知的消费者只会有一个获得购买资格(获得锁),此时就会core掉</span></span><br><span class="line">            <span class="keyword">if</span>(!head)&#123;</span><br><span class="line">                    <span class="comment">//解锁</span></span><br><span class="line">                    pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"thread[%d],C:[%d]\n"</span>,val,head-&gt;data);</span><br><span class="line">            pNode=head;</span><br><span class="line">            head=head-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(pNode);</span><br><span class="line">            pNode=<span class="literal">NULL</span>;</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//解锁</span></span><br><span class="line">            pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">  </span><br><span class="line">            sleep(rand()%<span class="number">3</span>);</span><br><span class="line">          &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">pthread_t</span> thread1[<span class="number">5</span>];</span><br><span class="line">          <span class="keyword">pthread_t</span> thread2[<span class="number">5</span>];</span><br><span class="line">  </span><br><span class="line">          <span class="comment">//初始化互斥锁</span></span><br><span class="line">          pthread_mutex_init(&amp;mutex,<span class="literal">NULL</span>);</span><br><span class="line">  </span><br><span class="line">          <span class="comment">//条件变量初始化</span></span><br><span class="line">          pthread_cond_init(&amp;cond,<span class="literal">NULL</span>);</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">int</span> arr[<span class="number">5</span>];</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;++i)&#123;</span><br><span class="line">            <span class="comment">//创建子线程1</span></span><br><span class="line">            arr[i]=i;</span><br><span class="line">            <span class="keyword">int</span> ret=pthread_create(&amp;thread1[i],<span class="literal">NULL</span>,producer,&amp;arr[i]);</span><br><span class="line">            <span class="keyword">if</span>(ret)&#123;</span><br><span class="line">                  <span class="built_in">printf</span>(<span class="string">"thread1 create failed\n"</span>);</span><br><span class="line">                  strerror(ret);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//创建子线程2</span></span><br><span class="line">            ret=pthread_create(&amp;thread2[i],<span class="literal">NULL</span>,consumer,&amp;arr[i]);</span><br><span class="line">            <span class="keyword">if</span>(ret)&#123;</span><br><span class="line">                  <span class="built_in">printf</span>(<span class="string">"thread2 create failed\n"</span>);</span><br><span class="line">                  strerror(ret);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="comment">//回收子线程</span></span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;++i)&#123;</span><br><span class="line">          pthread_join(thread1[i],<span class="literal">NULL</span>);</span><br><span class="line">          pthread_join(thread2[i],<span class="literal">NULL</span>);</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="comment">//释放互斥锁</span></span><br><span class="line">          pthread_mutex_destroy(&amp;mutex); </span><br><span class="line">          <span class="comment">//释放条件变量</span></span><br><span class="line">          pthread_cond_destroy(&amp;cond);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h6 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line">&gt;&gt;<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line">&gt;&gt;<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//定义信号量</span></span><br><span class="line">  <span class="keyword">sem_t</span> sem_producer;</span><br><span class="line">  <span class="keyword">sem_t</span> sem_consumer;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">  </span><br><span class="line">          <span class="keyword">int</span> data;</span><br><span class="line">          <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">  &#125;Node;</span><br><span class="line">  </span><br><span class="line">  Node *head=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> *<span class="title">producer</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  </span><br><span class="line">          <span class="comment">//int val=*(int *)arg;</span></span><br><span class="line">          Node *pNode=<span class="literal">NULL</span>;</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">  </span><br><span class="line">            pNode =(Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">            <span class="keyword">if</span>(!pNode)&#123;</span><br><span class="line">  </span><br><span class="line">                    perror(<span class="string">"malloc error"</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            pNode-&gt;data=rand()%<span class="number">1000</span>;</span><br><span class="line">  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"P:[%d]\n"</span>,pNode-&gt;data);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//p操作</span></span><br><span class="line">            sem_wait(&amp;sem_producer);</span><br><span class="line">            pNode-&gt;next=head;</span><br><span class="line">            head=pNode;</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//V操作</span></span><br><span class="line">            sem_post(&amp;sem_consumer);</span><br><span class="line">  </span><br><span class="line">            sleep(rand()%<span class="number">3</span>);</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">consumer</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  </span><br><span class="line">          <span class="comment">//int val=*(int *)arg;</span></span><br><span class="line">          Node *pNode=<span class="literal">NULL</span>;</span><br><span class="line">          <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//p操作</span></span><br><span class="line">            sem_wait(&amp;sem_consumer);</span><br><span class="line">  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"C:[%d]\n"</span>,head-&gt;data);</span><br><span class="line">            pNode=head;</span><br><span class="line">            head=head-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(pNode);</span><br><span class="line">            pNode=<span class="literal">NULL</span>;</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//V操作</span></span><br><span class="line">            sem_post(&amp;sem_producer);</span><br><span class="line">  </span><br><span class="line">            sleep(rand()%<span class="number">3</span>);</span><br><span class="line">          &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">pthread_t</span> thread1;</span><br><span class="line">          <span class="keyword">pthread_t</span> thread2;</span><br><span class="line">  </span><br><span class="line">          <span class="comment">//初始化信号量</span></span><br><span class="line">          <span class="comment">//第二个参数 0表示线程 1表示进程</span></span><br><span class="line">          <span class="comment">//第三个参数 为第一个参数初始化</span></span><br><span class="line">          sem_init(&amp;sem_producer,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">          sem_init(&amp;sem_consumer,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//创建子线程1</span></span><br><span class="line">            <span class="keyword">int</span> ret=pthread_create(&amp;thread1,<span class="literal">NULL</span>,producer,<span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">if</span>(ret)&#123;</span><br><span class="line">                  <span class="built_in">printf</span>(<span class="string">"thread1 create failed\n"</span>);</span><br><span class="line">                  strerror(ret);</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">//创建子线程2</span></span><br><span class="line">            ret=pthread_create(&amp;thread2,<span class="literal">NULL</span>,consumer,<span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">if</span>(ret)&#123;</span><br><span class="line">                  <span class="built_in">printf</span>(<span class="string">"thread2 create failed\n"</span>);</span><br><span class="line">                  strerror(ret);</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="comment">//回收子线程</span></span><br><span class="line">          pthread_join(thread1,<span class="literal">NULL</span>);</span><br><span class="line">          pthread_join(thread2,<span class="literal">NULL</span>);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">          <span class="comment">//释放信号量资源</span></span><br><span class="line">          sem_destroy(&amp;sem_producer);</span><br><span class="line">          sem_destroy(&amp;sem_consumer);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>多进程版本的并发服务器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多进程版本的网络服务器</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"wrap.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//信号处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">waitchild</span><span class="params">(<span class="keyword">int</span> signo)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> wpid;</span><br><span class="line"><span class="comment">//情况:在SIGCHLD执行期间,另外的2个以上的进程同时退出,此时会出现僵尸进程</span></span><br><span class="line"><span class="comment">//循环回收子进程,</span></span><br><span class="line"><span class="comment">//当waitpid==-1时表示已经回收所有子进程</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">wpid = waitpid(<span class="number">-1</span> , <span class="literal">NULL</span> , WNOHANG);</span><br><span class="line"><span class="keyword">if</span>(wpid&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"child exit , wpid==[%d]\n"</span>, wpid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(wpid==<span class="number">0</span> || wpid==<span class="number">-1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建socket</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> lfd=Socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置端口复用 </span></span><br><span class="line"><span class="comment">//解决"bind Address already in use "</span></span><br><span class="line"><span class="keyword">int</span> opt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ret=setsockopt(lfd, SOL_SOCKET ,SO_REUSEADDR, &amp;opt ,<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">if</span>(ret==<span class="number">-1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"sockopt"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绑定</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv</span>;</span></span><br><span class="line">bzero(&amp;serv,<span class="keyword">sizeof</span>(serv));</span><br><span class="line">serv.sin_family=AF_INET;</span><br><span class="line">serv.sin_addr.s_addr=htonl(INADDR_ANY);</span><br><span class="line">serv.sin_port = htons(<span class="number">8888</span>);</span><br><span class="line">Bind(lfd,(struct sockaddr *)&amp;serv, <span class="keyword">sizeof</span>(serv));</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置监听</span></span><br><span class="line">listen(lfd,<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//阻塞SIGCHLD信号</span></span><br><span class="line"><span class="comment">//防止情况发生:还未完成信号处理函数的注册,子进程都推出了</span></span><br><span class="line"><span class="keyword">sigset_t</span> mask;</span><br><span class="line">sigemptyset(&amp;mask);</span><br><span class="line">sigaddset(&amp;mask , SIGCHLD);</span><br><span class="line">sigprocmask(SIG_BLOCK, &amp;mask ,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="keyword">int</span> cfd;</span><br><span class="line"><span class="keyword">char</span> sIP[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">socklen_t</span> len;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待客户端连接</span></span><br><span class="line"><span class="built_in">memset</span>(sIP , <span class="number">0x00</span>, <span class="keyword">sizeof</span>(sIP));</span><br><span class="line">len = <span class="keyword">sizeof</span>(client);</span><br><span class="line"></span><br><span class="line">cfd=Accept(lfd, (struct sockaddr *)&amp;client , &amp;len);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"client--&gt;[%s]:[%d]\n"</span>,inet_ntop(AF_INET, &amp;client.sin_addr.s_addr ,sIP, <span class="keyword">sizeof</span>(sIP)), ntohs(client.sin_port));</span><br><span class="line"></span><br><span class="line">pid = fork();</span><br><span class="line"><span class="keyword">if</span>(pid&lt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">perror(<span class="string">"fork error\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pid&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭通信文件描述符</span></span><br><span class="line">close(cfd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册SIGCHLD信号处理函数</span></span><br><span class="line"><span class="comment">//sa_handler:指定信号捕捉后的处理函数名</span></span><br><span class="line"><span class="comment">//sa_mask:用来指定在信号处理函数执行期间所要屏蔽(阻塞)的信号</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act</span>;</span></span><br><span class="line">act.sa_handler = waitchild;</span><br><span class="line">act.sa_flags = <span class="number">0</span>;</span><br><span class="line">sigemptyset(&amp;act.sa_mask);   <span class="comment">//清空信号集</span></span><br><span class="line">sigaction(SIGCHLD , &amp;act , <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解除对SIGCHLD信号的阻塞</span></span><br><span class="line">sigprocmask(SIG_UNBLOCK , &amp;mask , <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭监听文件描述符</span></span><br><span class="line">close(lfd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读数据</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">n=Read(cfd, buf ,<span class="keyword">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"read error or client closed,n=[%d]\n"</span>,n);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"></span><br><span class="line">buf[i] = <span class="built_in">toupper</span>(buf[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送数据</span></span><br><span class="line">Write( cfd, buf, n );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭cfd;</span></span><br><span class="line"></span><br><span class="line">close(cfd);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(lfd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意情况发生:<br>    1.还未完成信号处理函数的注册,子进程都退出的问题<br>    2.端口复用问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">改进</span><br><span class="line"><span class="comment">//信号处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">waitchild</span><span class="params">(<span class="keyword">int</span> signo)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> wpid;</span><br><span class="line"><span class="comment">//情况:在SIGCHLD执行期间,另外的2个以上的进程同时退出,此时会出现僵尸进程</span></span><br><span class="line"><span class="comment">//循环回收子进程,</span></span><br><span class="line"><span class="comment">//当waitpid==-1时表示已经回收所有子进程</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">wpid = waitpid(<span class="number">-1</span> , <span class="literal">NULL</span> , WNOHANG);</span><br><span class="line"><span class="keyword">if</span>(wpid&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"child exit , wpid==[%d]\n"</span>, wpid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(wpid==<span class="number">0</span> || wpid==<span class="number">-1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建socket</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> lfd=Socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv</span>;</span></span><br><span class="line">bzero(&amp;serv,<span class="keyword">sizeof</span>(serv));</span><br><span class="line">serv.sin_family=AF_INET;</span><br><span class="line">serv.sin_addr.s_addr=htonl(INADDR_ANY);</span><br><span class="line">serv.sin_port = htons(<span class="number">8888</span>);</span><br><span class="line">Bind(lfd,(struct sockaddr *)&amp;serv, <span class="keyword">sizeof</span>(serv));</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置监听</span></span><br><span class="line">listen(lfd,<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//阻塞SIGCHLD信号</span></span><br><span class="line"><span class="comment">//防止情况发生:还未完成信号处理函数的注册,子进程都推出了</span></span><br><span class="line"><span class="keyword">sigset_t</span> mask;</span><br><span class="line">sigemptyset(&amp;mask);</span><br><span class="line">sigaddset(&amp;mask , SIGCHLD);</span><br><span class="line">sigprocmask(SIG_BLOCK, &amp;mask ,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="keyword">int</span> cfd;</span><br><span class="line"><span class="keyword">char</span> sIP[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">socklen_t</span> len;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待客户端连接</span></span><br><span class="line"><span class="built_in">memset</span>(sIP , <span class="number">0x00</span>, <span class="keyword">sizeof</span>(sIP));</span><br><span class="line">len = <span class="keyword">sizeof</span>(client);</span><br><span class="line"></span><br><span class="line">cfd=Accept(lfd, (struct sockaddr *)&amp;client , &amp;len);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"client--&gt;[%s]:[%d]\n"</span>,inet_ntop(AF_INET, &amp;client.sin_addr.s_addr ,sIP, <span class="keyword">sizeof</span>(sIP)), ntohs(client.sin_port));</span><br><span class="line"></span><br><span class="line">pid = fork();</span><br><span class="line"><span class="keyword">if</span>(pid&lt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">perror(<span class="string">"fork error\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pid&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭通信文件描述符</span></span><br><span class="line">close(cfd);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭监听文件描述符</span></span><br><span class="line">close(lfd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读数据</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">n=Read(cfd, buf ,<span class="keyword">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"read error or client closed,n=[%d]\n"</span>,n);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"></span><br><span class="line">buf[i] = <span class="built_in">toupper</span>(buf[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送数据</span></span><br><span class="line">Write( cfd, buf, n );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭cfd;</span></span><br><span class="line"></span><br><span class="line">close(cfd);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(lfd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多线程版本的高并发服务器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">do_work</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cfd=*(<span class="keyword">int</span> *)arg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//read数据</span></span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line">n=Read(cfd , buf ,<span class="keyword">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"read error or client closed,n=[%d]\n"</span>,n);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"n==[%d],buf==[%s]\n"</span>,n,buf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"></span><br><span class="line">buf[i]=<span class="built_in">toupper</span>(buf[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送数据给客户端</span></span><br><span class="line">Write(cfd, buf ,n);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭通信文件描述符</span></span><br><span class="line">close(cfd);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建socket</span></span><br><span class="line"><span class="keyword">int</span> lfd = Socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//bind</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv</span>;</span></span><br><span class="line">bzero(&amp;serv,<span class="keyword">sizeof</span>(serv));</span><br><span class="line">serv.sin_family = AF_INET;</span><br><span class="line">serv.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">serv.sin_port = htons(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">bind(lfd, (struct sockaddr *)&amp;serv , <span class="keyword">sizeof</span>(serv));</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听</span></span><br><span class="line">Listen(lfd , <span class="number">128</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cfd;</span><br><span class="line"><span class="keyword">pthread_t</span> thread;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接受新的连接</span></span><br><span class="line">cfd = Accept(lfd ,<span class="literal">NULL</span> ,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建线程</span></span><br><span class="line">pthread_create(&amp;thread,<span class="literal">NULL</span>,&amp;do_work,&amp;cfd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//分离属性</span></span><br><span class="line">pthread_detach(thread);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭监听文件描述符</span></span><br><span class="line">close(lfd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;线程&quot;&gt;&lt;a href=&quot;#线程&quot; class=&quot;headerlink&quot; title=&quot;线程&quot;&gt;&lt;/a&gt;线程&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>守护进程</title>
    <link href="http://yoursite.com/2021/03/02/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
    <id>http://yoursite.com/2021/03/02/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/</id>
    <published>2021-03-02T03:37:14.000Z</published>
    <updated>2021-03-02T03:37:22.216Z</updated>
    
    <content type="html"><![CDATA[<h4 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h4><p>   是linux中的后台服务进程，通常独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。一般采用以d结尾的名字。例如：预读入缓输出机制的实现；ftp服务器；nfs服务器</p><hr><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>linux后台服务进程</li><li>独立于控制终端</li><li>周期性的执行某种服务</li><li>不受用户登录或注销的影响</li><li>一般采用以d结尾的名字</li></ul><hr><h4 id="进程组"><a href="#进程组" class="headerlink" title="进程组,"></a>进程组,</h4><p> 是<b>一个或多个进程的集合</b>，每个进程都属于一个进程组，引入进程组是<b>为了简化对进程的管理</b>。当父进程创建子进程时，默认子进程与父进程属于一个进程组。</p><hr><h4 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h4><ul><li><b>一个会话是一个或个进程组的集合。</b></li><li><b>创建会话的进程不能是进程组组长。</b></li><li>创建会话的进程成为一个进程组的组长进程,同时也成为会话的会长。</li><li>新创建的会话丢弃原有的控制终端。</li><li>建立新会话时，先调用fork,父进程终止，子进程调用setsid函数</li></ul><p>可以通过ps ajx来查看进程组ID和会话ID</p><hr><h4 id="创建守护进程"><a href="#创建守护进程" class="headerlink" title="创建守护进程"></a>创建守护进程</h4><blockquote><p>创建基本步骤</p><blockquote><p><strong>1.fork子进程，父进程退出</strong></p><ul><li>子进程继承了父进程的进程组ID,但具有一个新的进程ID,这就保证了<strong>子进程不是一个进程组的组长ID</strong>,这是为调用setsid函数提供了必要的前提条件</li></ul></blockquote><blockquote><p><strong>2.子进程调用setsid函数创建新会话</strong><br>调用这个函数之后</p><ul><li>该进程成为新会话的首进程，是会话的会长</li><li>成为一个新进程组的组长进程，是进程组组长</li><li>不受控制终端的影响</li></ul></blockquote><blockquote><p>3.改变当前工作的目录chdir     ——–非必须</p></blockquote><blockquote><p>4.重设文件掩码                      ——–非必须</p><ul><li>子进程会继承父进程的掩码</li><li>增加子进程程序操作的灵活性</li><li>umask(0000)</li></ul></blockquote><blockquote><p>5.关闭文件描述符                  ——–非必须</p><ul><li>守护进程不受控制终端的影响所以可以关闭，以释放资源</li><li>close();</li></ul></blockquote><blockquote><p><strong>6.执行核心工作</strong></p><ul><li>守护进程的核心代码逻辑</li></ul></blockquote></blockquote><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre><code>编写一个守护进程,每隔2s钟获取一次系统时间,并将这次时间写入磁盘文件.分析:首先要按照步骤创建一个守护进程每隔2s:使用setitimer函数设置时钟,该时钟发送的是SIGALRM信号,信号操作:注册信号处理函数,signal或者sigaction,还有一个信号处理函数获取一次系统时间:time函数的使用,ctime函数的使用写入磁盘文件:文件操作哦函数:open write close</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建守护进程</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myfunc</span><span class="params">(<span class="keyword">int</span> signo)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line"><span class="keyword">int</span> fd=open(<span class="string">"mydemon.log"</span>,O_RDWR | O_CREAT | O_APPEND,<span class="number">0755</span>);</span><br><span class="line"><span class="keyword">if</span>(fd&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取当前系统时间</span></span><br><span class="line"><span class="keyword">time_t</span> tm;</span><br><span class="line">time(&amp;tm);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *tme=ctime(&amp;tm);</span><br><span class="line"><span class="comment">//将时间写入文件</span></span><br><span class="line">write(fd,tme,<span class="built_in">strlen</span>(tme));</span><br><span class="line"></span><br><span class="line">close(fd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//父进程fork子进程,父进程推出</span></span><br><span class="line">  <span class="keyword">pid_t</span> pid=fork();</span><br><span class="line">  <span class="keyword">if</span>(pid&lt;<span class="number">0</span> || pid&gt;<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//子进程调用setsid函数创建会话</span></span><br><span class="line">  setsid();</span><br><span class="line">  <span class="comment">//改变当前的工作目录</span></span><br><span class="line">  chdir(<span class="string">"/home/zs/log"</span>);</span><br><span class="line">  <span class="comment">//改变文件掩码</span></span><br><span class="line">  umask(<span class="number">0000</span>);<span class="comment">//0002,0022</span></span><br><span class="line">  <span class="comment">//关闭标准输入,输出和错误输出文件描述符</span></span><br><span class="line">  close(STDIN_FILENO);</span><br><span class="line">  close(STDOUT_FILENO);</span><br><span class="line">  close(STDERR_FILENO);</span><br><span class="line">  <span class="comment">//核心操作</span></span><br><span class="line">  <span class="comment">//注册信号处理函数</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act</span>;</span></span><br><span class="line">  act.sa_handler=myfunc;</span><br><span class="line">  act.sa_flags=<span class="number">0</span>;</span><br><span class="line">  sigemptyset(&amp;act.sa_mask);</span><br><span class="line">  sigaction(SIGALRM,&amp;act,<span class="literal">NULL</span>);</span><br><span class="line">   </span><br><span class="line">  <span class="comment">//设置时钟</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">itimerval</span> <span class="title">tm</span>;</span></span><br><span class="line">  tm.it_interval.tv_sec=<span class="number">2</span>;</span><br><span class="line">  tm.it_interval.tv_usec=<span class="number">0</span>;</span><br><span class="line">  tm.it_value.tv_sec=<span class="number">3</span>;</span><br><span class="line">  tm.it_value.tv_usec=<span class="number">0</span>;</span><br><span class="line">  setitimer(ITIMER_REAL, &amp;tm, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">  sleep(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;守护进程&quot;&gt;&lt;a href=&quot;#守护进程&quot; class=&quot;headerlink&quot; title=&quot;守护进程&quot;&gt;&lt;/a&gt;守护进程&lt;/h4&gt;&lt;p&gt;   是linux中的后台服务进程，通常独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。一般采用以d结尾的名</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>网络编程</title>
    <link href="http://yoursite.com/2021/03/02/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2021/03/02/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2021-03-02T03:36:22.000Z</published>
    <updated>2021-03-02T03:36:27.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h3 id="服务器端-Server"><a href="#服务器端-Server" class="headerlink" title="服务器端(Server)"></a>服务器端(Server)</h3><p>1.创建socket<br>2.为创建的文件绑定端口号和ip地址<br>3.监听客户端的请求<br>4.接受客户端的信息</p><ul><li><h4 id="socket-创建一个套接字用于通信"><a href="#socket-创建一个套接字用于通信" class="headerlink" title="socket() 创建一个套接字用于通信"></a>socket() 创建一个套接字用于通信</h4><pre><code>SOCKET socket(int af, int type,int proctocol);*    af:0是address family(地址族) ,一般填AF_INET表示在Internet的socket*    type :socket类型, 流方式是SOCK_STREAM,  数据报文方式是SOCK_DGRAM*    第三个是传输协议,一般填0*    返回类型是SOCKET,是WINSOCK分配给的Socket编号,当指针用就可以了.*    建立失败则返回INVALID_SOCKET(残疾缺口)</code></pre></li><li><h4 id="bind-将套接字与计算机上的一个端口号相绑定，进而在该端口监听服务请求"><a href="#bind-将套接字与计算机上的一个端口号相绑定，进而在该端口监听服务请求" class="headerlink" title="bind()    将套接字与计算机上的一个端口号相绑定，进而在该端口监听服务请求"></a>bind()    将套接字与计算机上的一个端口号相绑定，进而在该端口监听服务请求</h4><p>  一般来说，listen函数应该在调用socket和bind函数之后，调用函数accept之前调用。对于给定的监听套接口，内核要维护两个队列：<br>1、已由客户发出并到达服务器，服务器正在等待完成相应的TCP三路握手过程<br>2、已完成连接的队列</p><pre><code>int bind(SOCKET s, strut_ockaddr_in*  name,  int  namelen);函数执行成功返回0，失败返回-1*    s就是申请到的接口*    name 是指进程具体地址,他的类型是一个结构体*    namelen就是位置的长度</code></pre></li><li><h4 id="listen-函数用来将套接字设为监听模式，并在套接字指定的端口上开始监听，以便对到达的服务请求进行处理。"><a href="#listen-函数用来将套接字设为监听模式，并在套接字指定的端口上开始监听，以便对到达的服务请求进行处理。" class="headerlink" title="listen()   函数用来将套接字设为监听模式，并在套接字指定的端口上开始监听，以便对到达的服务请求进行处理。"></a>listen()   函数用来将套接字设为监听模式，并在套接字指定的端口上开始监听，以便对到达的服务请求进行处理。</h4><pre><code>* int listen(SOCKET s,int backlog);* s:用于标识一个已绑定未连接的套接字的描述字* backlog:相应socket可以排队的最大连接个数</code></pre></li><li><h4 id="accept-从已完成连接队列返回第一个连接，如果已完成连接队列为空，则阻塞。"><a href="#accept-从已完成连接队列返回第一个连接，如果已完成连接队列为空，则阻塞。" class="headerlink" title="accept()   从已完成连接队列返回第一个连接，如果已完成连接队列为空，则阻塞。"></a>accept()   从已完成连接队列返回第一个连接，如果已完成连接队列为空，则阻塞。</h4><pre><code>SOCKET accept(SOCKET s,struct sockaddr_in *addr,  int  *addrlen);* s: socket函数返回一个套接字描述符。* addr:是一个指向struct sockaddr，包含客户端的IP地址和端口。* addrlen:传入传出参数，addr所占内存空间大小。它设置于sizeof(struct sockaddr).* 成功返回一个新的套接字(并不是新创建的，而是队列中的)，用于和客户端通信* 失败返回-1</code></pre><h3 id="客户端-Client"><a href="#客户端-Client" class="headerlink" title="客户端(Client)"></a>客户端(Client)</h3></li><li><h4 id="connect-函数用来在面向连接的数据流-socket-模式下发送数据"><a href="#connect-函数用来在面向连接的数据流-socket-模式下发送数据" class="headerlink" title="connect() 函数用来在面向连接的数据流 socket 模式下发送数据"></a>connect() 函数用来在面向连接的数据流 socket 模式下发送数据</h4><pre><code>int connect(int sockfd, struct sockaddr *serv_addr, int addrlen);* sockfd: socket函数返回一个套接字描述符.* serv_addr 是一个指向struct sockaddr的包含目的IP地址和端口.* addrlen 设置sizeof为(struct sockaddr).int recv(SOCKET sock, char *buf, int len, int flags);  接收数据ssize_t read(int fd, void *buf, size_t nbytes);int send(SOCKET sock, const char *buf, int len, int flags);发送数据ssize_t write(int fd, const void *buf, size_t nbytes);</code></pre></li></ul><h3 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h3><p>大端(高端)字节序：高地址存放低位，低地址存放高位(也称作网络字节序)<br>小端(低端)字节序：低地址存放低位，高地址存放高位</p><p>网络传输采用的大端传输，如果机器是小端，需要对其进行转换<br>四个转换函数</p><pre><code>uint32_t htonl(uint32_t hostlong)uint16_t htons(uint16_t hostshort)uint32_t ntohl(uint32_t netlong)uint16_t ntohs(uint16_t netshort)h-host n-network s-short l-long</code></pre><p>IP地址转换函数</p><pre><code>int inet_pton(int af,const char * src,void *dst); 将ip地址的点分十进制形式转化为大端的网络ipconst char * inet_ntop(int af,const void *src,char *dst,socklen_t size);将大端的网络ip地址转化为ip地址的点分十进制形式成功返回指向dst的指针，错误返回NULL,置errno</code></pre><h3 id="socket基础操作"><a href="#socket基础操作" class="headerlink" title="socket基础操作"></a>socket基础操作</h3><h4 id="在windows下进行socket编程，需要对socket进行初始化操作"><a href="#在windows下进行socket编程，需要对socket进行初始化操作" class="headerlink" title="在windows下进行socket编程，需要对socket进行初始化操作"></a>在windows下进行socket编程，需要对socket进行初始化操作</h4><p>方法一：</p><pre><code>#pragma comment(lib,&quot;ws2_32.lib&quot;)</code></pre><p>方法二：在vs2017中，在属性-&gt;链接器-&gt;输入-&gt;附加依赖库中添加</p><pre><code>ws2_32.lib</code></pre><h3 id="所遇到的问题"><a href="#所遇到的问题" class="headerlink" title="所遇到的问题"></a>所遇到的问题</h3><pre><code>windows下进行socket编程,在客户端WSAGetLastError()方法返回&quot;10061&quot;错误:强制拒绝连接(对于WSAGetLastError()返回的错误编号说明可查询得到)</code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><pre><code>经过排除并非防火墙问题，问题集中在server端,开始以为是添加#include&lt;thread&gt;头文件,后来知道主要是因为当有thread库后会导致std::bind()函数和sock的bind()冲突,默认会调用std::bind()函数</code></pre><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><pre><code>方式一：若不用多线程库，则可直接将#include&lt;thread&gt;删除,即可方式二：不使用using namespace std方式二：将bind()改为::bind()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络编程&quot;&gt;&lt;a href=&quot;#网络编程&quot; class=&quot;headerlink&quot; title=&quot;网络编程&quot;&gt;&lt;/a&gt;网络编程&lt;/h1&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>拷贝构造函数(1)</title>
    <link href="http://yoursite.com/2021/03/02/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-2/"/>
    <id>http://yoursite.com/2021/03/02/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-2/</id>
    <published>2021-03-02T03:06:55.000Z</published>
    <updated>2021-03-02T03:08:00.765Z</updated>
    
    <content type="html"><![CDATA[<p><strong>拷贝赋值运算符</strong><br>与类控制其对象如何初始化一样，类也可以控制其对象如何赋值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sales_data trans,accum;</span><br><span class="line">trans=accum;   //使用Sales_data的拷贝赋值运算符</span><br></pre></td></tr></table></figure><p>与拷贝构造函数一样，如果类未定义自己的拷贝赋值运算符时，编译器会默认合成一个。</p><p><strong>重载赋值运算符</strong><br>赋值运算符通常应该返回一个指向其左侧运算对象的引用。</p><p><strong>合成拷贝赋值运算符</strong><br>如果一个类未定义自己的拷贝构造赋值运算符，编译器会为它生成一个合成拷贝赋值运算符。<br>对于某些类，合成拷贝赋值运算符用来禁止该对象的赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ex1.</span><br><span class="line">Sales_data &amp;operator=(const Sales_data &amp;)=delete;  //阻止赋值</span><br><span class="line">~Sales_data()=default;   //使用合成的析构函数</span><br></pre></td></tr></table></figure><p>合成拷贝赋值运算符返回一个指向其左侧运算对象的引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sales_data&amp;  </span><br><span class="line">Sales_data::operator=(const Sales_data &amp;rhs) &#123;</span><br><span class="line">    </span><br><span class="line">    bookNo=rhs.bookNo;</span><br><span class="line">    units_sold=rhs.units_sold;</span><br><span class="line">    revenue=rhs.revenue;</span><br><span class="line">    return *this;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>析构函数</strong><br>析构函数是类的一个成员函数，名字由波浪线接类名构成。它没有返回值，也不接受参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Foo&#123;</span><br><span class="line">public :</span><br><span class="line">    ~Foo();</span><br><span class="line">    //...</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>在一个析构函数中，首先执行函数体，然后销毁成员(<strong>成员是在析构函数体之后隐含的析构阶段中被销毁的</strong>)，成员按初始化顺序的逆序销毁。<br>通常情况，析构函数会释放对象在生存期分配的所有资源。<br><strong>隐式销毁一个内置指针类型的成员不会delete它所指向的成员</strong><br><strong>调用析构函数</strong><br>无论任何一个对象被销毁，都会自动调用析构函数。</p><p><strong>合成析构函数</strong><br>如果一个类没有定义自己的析构函数，编译器会为它定义一个合成析构函数，类似拷贝构造函数和赋值拷贝构造函数，对于某些类，合成构造拷贝函数被用来阻止该类型的对象被销毁。（ex1）;<br>如果不是这种情况，合成析构函数的函数体就为空。</p><p><strong>三/五法则</strong><br>五个操作：拷贝构造函数、拷贝赋值运算符、移动构造函数、移动赋值运算符、析构函数。<br>一般情况，需要其中一种操作，也会需要所有操作，这些操作通常被看做一个整体。<br><strong>（1）需要析构函数的类也需要拷贝和赋值操作</strong><br>当我们决定一个类是否要定义它自己版本的构造函数时，<strong>一个基本原则</strong>首先确定这个类是否需要析构函数，如果需要，似乎可以肯定他也需要拷贝构造函数和拷贝赋值运算符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class HasPtr &#123;</span><br><span class="line">public:</span><br><span class="line">    HasPtr(const std::string &amp;s=std::string()):ps(new std::string),i(0) &#123;&#125;</span><br><span class="line">    ~HasPtr() &#123;delete ps;&#125;</span><br><span class="line">    //error：HasPtr需要一个拷贝构造函数和拷贝赋值运算符</span><br><span class="line">&#125;;</span><br><span class="line">在这个类的定义中，构造函数分配的内存将在HasPtr对象销毁时释放，error：我们使用了合成构造函数和拷贝构造函数，这些函数简单拷贝指针成员，这样就会使多个HasPtr对象指向相同的内存。delete时出错。</span><br><span class="line">HasPtr f(HasPtr hp)&#123;</span><br><span class="line">   HasPtr ret=hp;   //copy HasPtr</span><br><span class="line">   return ret;     //销毁hp and ret</span><br><span class="line">   &#125;</span><br><span class="line">  当f返回时，hp和ret都会被销毁，在两个对象上都会调用HasPtr的析构函数，此析构函数会delete ret 和hp</span><br><span class="line">  中的指针成员，但这两个对象都包含相同的指针值，此代码会导致指针被delete两次，就会出错(...未定义的)。</span><br></pre></td></tr></table></figure><p><strong>（2）需要拷贝的类也需要赋值操作，反之亦然</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;拷贝赋值运算符&lt;/strong&gt;&lt;br&gt;与类控制其对象如何初始化一样，类也可以控制其对象如何赋值：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>灿烂星空</title>
    <link href="http://yoursite.com/2019/09/28/site/"/>
    <id>http://yoursite.com/2019/09/28/site/</id>
    <published>2019-09-28T02:42:26.000Z</published>
    <updated>2021-03-02T03:35:19.125Z</updated>
    
    <content type="html"><![CDATA[<p>在这漫漫星空遇见，既是一种缘分</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在这漫漫星空遇见，既是一种缘分&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ubuntu { DRDY ERR }</title>
    <link href="http://yoursite.com/2019/05/02/ubuntu-error/"/>
    <id>http://yoursite.com/2019/05/02/ubuntu-error/</id>
    <published>2019-05-02T03:26:00.000Z</published>
    <updated>2021-03-02T03:27:12.881Z</updated>
    
    <content type="html"><![CDATA[<p>………<br>68489.756311] ata3.00: status: { DRDY ERR }<br>[68489.756314] ata3.00: error: { UNC }<br>[68489.951583] ata3.00: configured for UDMA/133<br>[68489.951604] ata3: EH complete<br>[68492.671124] ata3.00: exception Emask 0x0 SAct 0x0 SErr 0x0 action 0x0<br>[68492.671133] ata3.00: BMDMA stat 0x24<br>[68492.671140] ata3.00: cmd c8/00:08:55:e8:8d/00:00:00:00:00/e2 tag 0 dma 4096 in<br>[68492.671142]          res 51/40:00:56:e8:8d/00:00:00:00:00/02 Emask 0x9 (media error)<br>[68492.671145] ata3.00: status: { DRDY ERR }<br>[68492.671148] ata3.00: error: { UNC }<br>[68492.899657] ata3.00: configured for UDMA/133<br>[68492.899678] ata3: EH complete<br>[68495.610841] ata3.00: exception Emask 0x0 SAct 0x0 SErr 0x0 action 0x0<br>[68495.610851] ata3.00: BMDMA stat 0x24<br>[68495.610857] ata3.00: cmd c8/00:08:55:e8:8d/00:00:00:00:00/e2 tag 0 dma 4096 in<br>[68495.610859]          res 51/40:00:56:e8:8d/00:00:00:00:00/02 Emask 0x9 (media error)<br>[68495.610863] ata3.00: status: { DRDY ERR }<br>[68495.610865] ata3.00: error: { UNC }<br>[68495.799599] ata3.00: configured for UDMA/133<br>[68495.799620] sd 2:0:0:0: [sda] Result: hostbyte=DID_OK driverbyte=DRIVER_SENSE,SUGGEST_OK<br>[68495.799626] sd 2:0:0:0: [sda] Sense Key : Medium Error [current] [descriptor]<br>[68495.799631] Descriptor sense data with sense descriptors (in hex):<br>[68495.799633]         72 03 11 04 00 00 00 0c 00 0a 80 00 00 00 00 00<br>[68495.799643]         02 8d e8 56<br>[68495.799647] sd 2:0:0:0: [sda] Add. Sense: Unrecovered read error - auto reallocate failed<br>[68495.799653] end_request: I/O error, dev sda, sector 42854486<br>[68495.799675] ata3: EH complete<br>[68495.800096] sd 2:0:0:0: [sda] 625142448 512-byte hardware sectors (320073 MB)<br>[68495.817023] sd 2:0:0:0: [sda] Write Protect is off<br>[68495.817030] sd 2:0:0:0: [sda] Mode Sense: 00 3a 00 00<br>[68495.819042] sd 2:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn’t support DPO or FUA<br>[68495.826120] sd 2:0:0:0: [sda] 625142448 512-byte hardware sectors (320073 MB)<br>…..</p><p>可能因为突然断电，或强制关机..导致的问题。<br>我尝试使用HDD Regenerator去修复成功了。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d40f04a08860107c2c40b672d0ad75e5.png" alt="这里写图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;………&lt;br&gt;68489.756311] ata3.00: status: { DRDY ERR }&lt;br&gt;[68489.756314] ata3.00: error: { UNC }&lt;br&gt;[68489.951583] ata3.00: configured for UD</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo博客搭建</title>
    <link href="http://yoursite.com/2017/06/01/hello-world/"/>
    <id>http://yoursite.com/2017/06/01/hello-world/</id>
    <published>2017-06-01T12:46:00.000Z</published>
    <updated>2021-03-02T03:33:15.432Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><h3 id="博客迁移"><a href="#博客迁移" class="headerlink" title="博客迁移"></a>博客迁移</h3><hr><h4 id="当需要迁移博客时，保存以下文件"><a href="#当需要迁移博客时，保存以下文件" class="headerlink" title="当需要迁移博客时，保存以下文件"></a>当需要迁移博客时，保存以下文件</h4><pre><code>_config.yml package.jsonscaffolds/source/themes/.gitignore</code></pre><h4 id="将其打包放入一个文件夹例如：hexo"><a href="#将其打包放入一个文件夹例如：hexo" class="headerlink" title="将其打包放入一个文件夹例如：hexo"></a>将其打包放入一个文件夹例如：hexo</h4><h4 id="执行下面命令"><a href="#执行下面命令" class="headerlink" title="执行下面命令"></a>执行下面命令</h4><pre><code>npm install -g hexo-cli //安装npm后，安装hexonpm install hexo-deployer-git --save //hexo部署插件hexo g  //构建hexo s  //服务执行hexo d  //部署hexo clean //清除hexo n &quot;pagename&quot;  //创建博文</code></pre><p>注意theme 我们所需的主题是否在，若不在重新下载。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;主题&quot;&gt;&lt;a href=&quot;#主题&quot; class=&quot;headerlink&quot; title=&quot;主题&quot;&gt;&lt;/a&gt;主题&lt;/h2&gt;&lt;h3 id=&quot;博客迁移&quot;&gt;&lt;a href=&quot;#博客迁移&quot; class=&quot;headerlink&quot; title=&quot;博客迁移&quot;&gt;&lt;/a&gt;博客迁移&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>拷贝构造函数(1)</title>
    <link href="http://yoursite.com/2017/03/02/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-1/"/>
    <id>http://yoursite.com/2017/03/02/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-1/</id>
    <published>2017-03-02T03:09:00.000Z</published>
    <updated>2021-03-02T03:12:01.784Z</updated>
    
    <content type="html"><![CDATA[<p><strong>拷贝赋值运算符</strong><br>与类控制其对象如何初始化一样，类也可以控制其对象如何赋值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sales_data trans,accum;</span><br><span class="line">trans=accum;   //使用Sales_data的拷贝赋值运算符</span><br></pre></td></tr></table></figure><p>与拷贝构造函数一样，如果类未定义自己的拷贝赋值运算符时，编译器会默认合成一个。</p><p><strong>重载赋值运算符</strong><br>赋值运算符通常应该返回一个指向其左侧运算对象的引用。</p><p><strong>合成拷贝赋值运算符</strong><br>如果一个类未定义自己的拷贝构造赋值运算符，编译器会为它生成一个合成拷贝赋值运算符。<br>对于某些类，合成拷贝赋值运算符用来禁止该对象的赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ex1.</span><br><span class="line">Sales_data &amp;operator=(const Sales_data &amp;)=delete;  //阻止赋值</span><br><span class="line">~Sales_data()=default;   //使用合成的析构函数</span><br></pre></td></tr></table></figure><p>合成拷贝赋值运算符返回一个指向其左侧运算对象的引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sales_data&amp;  </span><br><span class="line">Sales_data::operator=(const Sales_data &amp;rhs) &#123;</span><br><span class="line">    </span><br><span class="line">    bookNo=rhs.bookNo;</span><br><span class="line">    units_sold=rhs.units_sold;</span><br><span class="line">    revenue=rhs.revenue;</span><br><span class="line">    return *this;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>析构函数</strong><br>析构函数是类的一个成员函数，名字由波浪线接类名构成。它没有返回值，也不接受参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Foo&#123;</span><br><span class="line">public :</span><br><span class="line">    ~Foo();</span><br><span class="line">    //...</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>在一个析构函数中，首先执行函数体，然后销毁成员(<strong>成员是在析构函数体之后隐含的析构阶段中被销毁的</strong>)，成员按初始化顺序的逆序销毁。<br>通常情况，析构函数会释放对象在生存期分配的所有资源。<br><strong>隐式销毁一个内置指针类型的成员不会delete它所指向的成员</strong><br><strong>调用析构函数</strong><br>无论任何一个对象被销毁，都会自动调用析构函数。</p><p><strong>合成析构函数</strong><br>如果一个类没有定义自己的析构函数，编译器会为它定义一个合成析构函数，类似拷贝构造函数和赋值拷贝构造函数，对于某些类，合成构造拷贝函数被用来阻止该类型的对象被销毁。（ex1）;<br>如果不是这种情况，合成析构函数的函数体就为空。</p><p><strong>三/五法则</strong><br>五个操作：拷贝构造函数、拷贝赋值运算符、移动构造函数、移动赋值运算符、析构函数。<br>一般情况，需要其中一种操作，也会需要所有操作，这些操作通常被看做一个整体。<br><strong>（1）需要析构函数的类也需要拷贝和赋值操作</strong><br>当我们决定一个类是否要定义它自己版本的构造函数时，<strong>一个基本原则</strong>首先确定这个类是否需要析构函数，如果需要，似乎可以肯定他也需要拷贝构造函数和拷贝赋值运算符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class HasPtr &#123;</span><br><span class="line">public:</span><br><span class="line">    HasPtr(const std::string &amp;s=std::string()):ps(new std::string),i(0) &#123;&#125;</span><br><span class="line">    ~HasPtr() &#123;delete ps;&#125;</span><br><span class="line">    //error：HasPtr需要一个拷贝构造函数和拷贝赋值运算符</span><br><span class="line">&#125;;</span><br><span class="line">在这个类的定义中，构造函数分配的内存将在HasPtr对象销毁时释放，error：我们使用了合成构造函数和拷贝构造函数，这些函数简单拷贝指针成员，这样就会使多个HasPtr对象指向相同的内存。delete时出错。</span><br><span class="line">HasPtr f(HasPtr hp)&#123;</span><br><span class="line">   HasPtr ret=hp;   //copy HasPtr</span><br><span class="line">   return ret;     //销毁hp and ret</span><br><span class="line">   &#125;</span><br><span class="line">  当f返回时，hp和ret都会被销毁，在两个对象上都会调用HasPtr的析构函数，此析构函数会delete ret 和hp</span><br><span class="line">  中的指针成员，但这两个对象都包含相同的指针值，此代码会导致指针被delete两次，就会出错(...未定义的)。</span><br></pre></td></tr></table></figure><p><strong>（2）需要拷贝的类也需要赋值操作，反之亦然</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;拷贝赋值运算符&lt;/strong&gt;&lt;br&gt;与类控制其对象如何初始化一样，类也可以控制其对象如何赋值：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>拷贝构造函数(2)</title>
    <link href="http://yoursite.com/2017/01/12/test/"/>
    <id>http://yoursite.com/2017/01/12/test/</id>
    <published>2017-01-12T15:06:00.000Z</published>
    <updated>2021-03-02T03:13:32.661Z</updated>
    
    <content type="html"><![CDATA[<p><strong>（1）拷贝构造函数</strong><br>如果一个构造函数的第一个参数是自身类类型的引用，且任何额外参数都有默认值，则此构造函数是拷贝构造函数。<br>class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Foo &#123;</span><br><span class="line">public:</span><br><span class="line">   Foo();</span><br><span class="line">   Foo(const Foo &amp;); //拷贝构造函数</span><br><span class="line">   //...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>拷贝构造函数的第一个参数必须是一个引用类型。</p><p><strong>合成拷贝构造函数</strong><br>对于某些类，用来拷贝该类类型的对象。<br>一般情况，合成的构造函数会将其参数的成员逐个拷贝到正在创建的对象中。<br>每个成员的类型决定了如何拷贝：对类类型的成员，会使用其拷贝构造函数来拷贝：内置成员的类型则直接拷贝。我们不能直接拷贝一个数组，但合成拷贝构造函数会逐元素的拷贝一个数组成员的类类型。<br>ex</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Sales_data &#123;</span><br><span class="line">    std::string bookNo;</span><br><span class="line">    unsigned units_sold=0;</span><br><span class="line">    double revenue=0.0;</span><br><span class="line">    public:</span><br><span class="line">     Sales_data(const Sales_data &amp;); </span><br><span class="line">     &#125;; </span><br><span class="line">     Sales_data::Sales_data(const Sales_data &amp; orig) :</span><br><span class="line">    bookNo(orig.bookNo),                   //使用string的拷贝构造函数</span><br><span class="line">    units_sold(orig.units_sold),           //拷贝orig.units_sold</span><br><span class="line">    revenue(orig.revenue)&#123;&#125;                //...</span><br></pre></td></tr></table></figure><p><strong>直接初始化和拷贝初始化</strong><br>直接初始化：不使用等号，初始化变量，执行的是直接初始化。<br>拷贝初始化：初始化变量时，使用等号（=）来初始化，编译器把等号右侧的初始值拷贝到新创建的对象中去,如果需要，还要进行类型转换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ex.</span><br><span class="line">string dots(10,&apos;,&apos;);</span><br><span class="line">string s(dots);    //direct initialization</span><br><span class="line">string s2=dots;   //copy initialization</span><br></pre></td></tr></table></figure><p><strong>拷贝初始化</strong><br>拷贝初始化依靠拷贝构造函数或移动构造函数来完成。<br>拷贝初始化不仅在我们用等号定义变量时会发生，在下列情况下也会发生</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 将一个对象作为实参传递给一个非引用类型的形参。</span><br><span class="line">2 从一个返回类型为非引用类型的函数返回一个对象。</span><br><span class="line">3 用花括号列表初始化一个数组中的元素或一个聚合类中的成员。</span><br></pre></td></tr></table></figure><p><strong>参数和返回值</strong><br>在函数调用过程中，具有非引用类型的参数要进行拷贝初始化。当一个函数具有非引用的返回类型时，返回值会被初始化调用方的结果。<br><strong>拷贝初始化的限制</strong><br>explicit构造函数只可用于直接初始化<br><strong>编译器可以绕过拷贝构造函数</strong><br>在拷贝构造初始化过程中，编译器可以跳过拷贝、移动构造函数，直接创建对象。即允许</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string null_book=&quot;9-999-99999-9&quot;;  //拷贝初始化</span><br><span class="line">改写为</span><br><span class="line">string null_book(&quot;9-999-99999-9&quot;);  //编译器略过了拷贝构造函数</span><br></pre></td></tr></table></figure><p>即便略过了拷贝构造函数，但拷贝构造函数必须是存在且可访问的（ex. 不能是private的）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;（1）拷贝构造函数&lt;/strong&gt;&lt;br&gt;如果一个构造函数的第一个参数是自身类类型的引用，且任何额外参数都有默认值，则此构造函数是拷贝构造函数。&lt;br&gt;class&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    
  </entry>
  
</feed>
